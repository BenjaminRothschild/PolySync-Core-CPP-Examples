//PathPlanner
#include <cmath>
#include <iostream>

#include <PolySyncDataModel.hpp>

#include "SearchNode.hpp"
#include "GridMap.hpp"

using namespace cv;
using namespace std;
using namespace polysync::datamodel;

constexpr int INVALID_LOC = -1;

SearchNode::SearchNode( )
    :
    searcher( ),
    golLocX( INVALID_LOC ),
    golLocY( INVALID_LOC ),
    robLocX( INVALID_LOC ),
    robLocY( INVALID_LOC ),
    newRobLocX( INVALID_LOC ),
    newRobLocY( INVALID_LOC ),
    waypointCounter( INVALID_LOC )
{
    setNodeName( "searchNode" );
    setNodeType( PSYNC_NODE_TYPE_SOFTWARE_ALGORITHM );

}

SearchNode::~SearchNode( ){

}

void SearchNode::initStateEvent( ) {
    registerListener( getMessageTypeByName( "ps_platform_motion_msg" ) );
    setSubscriberReliabilityQOS(
                                getMessageTypeByName( "ps_platform_motion_msg" ),
                                RELIABILITY_QOS_RELIABLE );
}

void SearchNode::okStateEvent( ) {
    if ( golLocX == INVALID_LOC && golLocY == INVALID_LOC ) {
        searcher = std::unique_ptr<Planner>{ new Planner };
        golLocX = searcher->getGoalX( );
        golLocY = searcher->getGoalY( );

        cout << "Goal Location generated by Planner Algorithm. " << endl;
        cout << "Sending goal location to robot." << endl << endl;
        cout << "Waiting for Robot Location." << endl << endl << std::flush;
        //polySyncLogDebug( "HELLO!!" );
    } else if ( robLocX == INVALID_LOC  || robLocY == INVALID_LOC ){
        sendGoalToRobot( );
        polysync::sleepMicro(1000);
    } else if ( newRobLocX == INVALID_LOC && newRobLocY == INVALID_LOC ) {
        cout << "Robot start location received by planner algorithm." << endl;
        cout << "Begin searching for optimal path from start location." << endl;
        int robIndex = searcher->world.getIndexFromState(robLocX, robLocY);
        searcher->searchAStar( robIndex );
        newRobLocX = int(robLocX);
        newRobLocY = int(robLocY);
    } else if ( newRobLocX != INVALID_LOC || newRobLocY != INVALID_LOC ) {
        cout << "Sending waypoint " << waypointCounter+1 << " to robot." << endl;
        int robIndex = searcher->world.getIndexFromState(robLocX, robLocY);
        if ( searcher->world.checkGoal( robIndex ) ) {
            disconnectPolySync( );
            return;
        }
        int newIndex = searcher->getNextWaypoint( waypointCounter+1 );
        sendNextWaypoint( newIndex, int(waypointCounter+1) );
        polysync::sleepMicro(1000);
    } else {
        polysync::sleepMicro(1000);
        return;
    }
}

void SearchNode::messageEvent( std::shared_ptr<polysync::Message> newMsg ) {
    if ( newMsg->getSourceGuid( ) == getGuid( ) ) {
        //cout << "This is Planner's Message" << endl;
        return;
    }
    if ( auto msg = getSubclass<PlatformMotionMessage>( newMsg ) ) {
        if ( msg->getOrientation()[0] != robLocX ||
                msg->getOrientation()[1] != robLocY ) {
            robLocX = msg->getOrientation()[0];
            robLocY = msg->getOrientation()[1];
            if ( waypointCounter != INVALID_LOC ) {
                cout << "New Message at waypoint: " << msg->getPosition()[0];
                cout << endl << std::flush;
            }
            waypointCounter = msg->getPosition()[0];
        }
    }
}

void SearchNode::sendGoalToRobot( ) {
    PlatformMotionMessage msg( *this );
    msg.setHeaderTimestamp( polysync::getTimestamp() );
    //msg.setOrientation( {0.0,0.0,0.0,0.0});
    msg.setOrientation( {double(golLocX), double(golLocY), 0, 0} );
    msg.publish( );
    //msg.print( );
}

void SearchNode::sendNextWaypoint( int newIndex, int waypointID ) {
    searcher->world.getStateFromIndex( newIndex );
    newRobLocX = searcher->world.checkedMoveIndX;
    newRobLocY = searcher->world.checkedMoveIndY;

    PlatformMotionMessage msg( *this );
    msg.setHeaderTimestamp( polysync::getTimestamp() );
    msg.setPosition( {double(waypointID), 0, 0} );
    msg.setOrientation( {newRobLocX, newRobLocY, 0, 0} );
    msg.publish();
    //msg.print();
}

int main() {

    SearchNode searchNode;
    searchNode.connectPolySync( );

    return 0;
}
